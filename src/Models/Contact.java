package Models;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.SecureRandom;
import java.time.LocalDate;

public class Contact {
    private String firstName, lastName, address, phone;
    private LocalDate birthday;
    private int id;
    private File imageFile;

    /**
     * First constructor that assigns a default image
     * @param id
     * @param firstName
     * @param lastName
     * @param address
     * @param phone
     * @param birthday
     */
    public Contact(int id, String firstName, String lastName, String address, String phone, LocalDate birthday) {
        setId(id);
        setFirstName(firstName);
        setLastName(lastName);
        setAddress(address);
        setPhone(phone);
        setBirthday(birthday);
        setImageFile(new File("./src/Views/Images/Default.jpg"));
    }

    /**
     * Second constructor that will use a custom images if the user wants
     * @param id
     * @param firstName
     * @param lastName
     * @param address
     * @param phone
     * @param birthday
     * @param imageFile
     */
    public Contact(int id, String firstName, String lastName, String address, String phone, LocalDate birthday, File imageFile) throws IOException {
        this(id, firstName, lastName, address, phone, birthday);
        setImageFile(imageFile);
        copyImageFile();
    }

    public int getId() {
        return id;
    }

    /**
     * No validation required for id as it's generated by database
     * @param id
     */
    public void setId(int id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    /**
     * Set the first name and validate it's not empty
     * @param firstName
     */
    public void setFirstName(String firstName) {
        if (firstName.isEmpty()){
            throw new IllegalArgumentException("First name cannot be empty");
        } else{
            this.firstName = firstName;
        }
    }

    public String getLastName() {
        return lastName;
    }

    /**
     * Set the last name and validate it's not empty
     * @param lastName
     */
    public void setLastName(String lastName) {
        if (lastName.isEmpty()){
            throw new IllegalArgumentException("Last name cannot be empty");
        } else{
            this.lastName = lastName;
        }
    }

    public String getAddress() {
        return address;
    }

    /**
     * Set the address and validate it's not empty
     * @param address
     */
    public void setAddress(String address) {
        if (address.isEmpty()){
            throw new IllegalArgumentException("Address cannot be empty");
        } else{
            this.address = address;
        }
    }

    public String getPhone() {
        return phone;
    }

    /**
     * Set the phone and validate it follows NXX pattern
     * Area Code    City    House
     * NXX          -XXX    -XXXX
     * @param phone
     */
    public void setPhone(String phone) {
        if (phone.matches("[2-9]\\d{2}[-.]?\\d{3}[-.]\\d{4}")){
            this.phone = phone;
        } else{
            throw new IllegalArgumentException("Phone Number must follow the pattern NXX-XXX-XXXX");
        }
    }

    public LocalDate getBirthday() {
        return birthday;
    }

    /**
     * Set the birthday and validate the user wasn't born today or in the future
     * @param birthday
     */
    public void setBirthday(LocalDate birthday){
        if (birthday.isAfter(LocalDate.now())){
            throw new IllegalArgumentException("Birthday cannot be in the future");
        } else if (birthday.isEqual(LocalDate.now())){
            throw new IllegalArgumentException("You were not born today, and neither was I");
        } else{
            this.birthday = birthday;
        }
    }

    public File getImageFile() {
        return imageFile;
    }

    public void setImageFile(File imageFile) {
        this.imageFile = imageFile;
    }

    /**
     * A method that will copy the selected file to the 'Views/Images' folder and give it a unique name
     */
    public void copyImageFile() throws IOException {
        Path sourcePath = imageFile.toPath();

        String uniqueFileName = getUniqueFileName(imageFile.getName());

        Path targetPath = Paths.get("./src/Views/Images/"+uniqueFileName);

        Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);

        imageFile = new File(targetPath.toString());
    }

    /**
     * A method that will recieve a string that a file name and return a string with a random, unique set of letters prefixed to it
     */
     private String getUniqueFileName(String oldFileName){
        String newName;

        SecureRandom rng = new SecureRandom();

        do{
            newName = "";

            for (int i=1;i<=32;i++){
                int nextChar;

                do{
                    nextChar = rng.nextInt(123);
                }while(!validCharacterValue(nextChar));

                newName = String.format("%s%c", newName, nextChar);
            }
            newName += oldFileName;
        }while(!uniqueFileInDirectory(newName));
        return newName;
    }

    /**
     * A method that will search the images directory and ensure the file name is unique
     */
    public boolean uniqueFileInDirectory(String fileName){
        File directory = new File("./src/Views/Images");

        File[] dir_contents = directory.listFiles();

        for (File file: dir_contents){
            if(file.getName().equals(fileName)){
                return false;
            }
        }
        return true;
    }

    /**
     * This method will validate if the integer given corresponds to a valid ASCII character that could be used in a file name
     */
    public boolean validCharacterValue(int asciiValue){
        //0-9 = ASCII range 48 to 57
        if(asciiValue >= 48 && asciiValue <= 57){
            return true;
        }
        //A-Z = ASCII range 65 to 90
        if (asciiValue >= 65 && asciiValue <= 90){
            return true;
        }
        //a-z = ASCII range 97 to 122
        if (asciiValue >= 97 && asciiValue <= 122){
            return true;
        }
        return false;
    }
}
